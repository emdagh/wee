
CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(wee LANGUAGES C CXX)

set(default_build_type "Release")
if(EXISTS "${CMAKE_SOURCE_DIR}/.git")
    set(default_build_type "Debug")
    SET(_DEBUG True)
endif()

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
    set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
        STRING "Choose the type of build." FORCE)
        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

MESSAGE(STATUS "Build type is '${CMAKE_BUILD_TYPE}'.")

IF(UNIX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpic -Wall -Werror -std=c++17") #-Wextra
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fpic")

    IF(ANDROID)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions")

        SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${ANDROID_ABI}/${CMAKE_BUILD_TYPE} )
        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${ANDROID_ABI}/${CMAKE_BUILD_TYPE} )
        SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/${ANDROID_ABI}/${CMAKE_BUILD_TYPE} )

        #SET(BUILD_STATIC_LIBRARIES OFF CACHE BOOL "Build static libraries" FORCE)
        #SET(BUILD_DYNAMIC_LIBRARIES ON CACHE BOOL "Build dynamic libraries" FORCE)
        #SET(LIBRARY_TYPE SHARED)
    ELSEIF(IOS)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fobjc-abi-version=2 -fobjc-arc -x objective-c++")
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")

        SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_CONFIGURATION_TYPE} )
        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_CONFIGURATION_TYPE} )
        SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/${CMAKE_CONFIGURATION_TYPE} )

        #SET(BUILD_STATIC_LIBRARIES ON   CACHE BOOL "Build static libraries" FORCE)
        #SET(BUILD_DYNAMIC_LIBRARIES OFF CACHE BOOL "Build dynamic libraries" FORCE)
        #SET(LIBRARY_TYPE STATIC)
    ELSE()
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse -msse2")

        SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE} )
        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE} )
        SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE} )


        SET(LIBRARY_TYPE SHARED)

    ENDIF()
ELSEIF(WIN32)
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
    ADD_DEFINITIONS(-D_SILENCE_CXX17_UNCAUGHT_EXCEPTION_DEPRECATION_WARNING)
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse -msse2")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++latest")
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
    SET(LIBRARY_TYPE STATIC)
    IF(WINDOWS_PHONE)
    ELSE()
    ENDIF()
ENDIF()

MESSAGE(STATUS "Output directory (libraries/archives): '${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}'")
MESSAGE(STATUS "Output directory (binaries): '${CMAKE_RUNTIME_OUTPUT_DIRECTORY}'")

configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/include/wee/config.h.in
    ${CMAKE_CURRENT_BINARY_DIR}/include/wee/config.h
    )

INCLUDE_DIRECTORIES(
    ${CMAKE_BINARY_DIR}/vendor/SDL2/include
    ${CMAKE_SOURCE_DIR}/vendor
    ${CMAKE_BINARY_DIR}/include/wee
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/include/wee
    ${CMAKE_SOURCE_DIR}/vendor/liquidfun/liquidfun/Box2D
    ${CMAKE_SOURCE_DIR}/vendor/SDL2/include
    ${CMAKE_SOURCE_DIR}/vendor/SDL2_image
    ${CMAKE_SOURCE_DIR}/vendor/SDL2_ttf
    ${CMAKE_SOURCE_DIR}/vendor/SDL2_mixer
    ${CMAKE_SOURCE_DIR}/vendor/date/include
    ${CMAKE_SOURCE_DIR}/vendor/fmt/include
    ${CMAKE_SOURCE_DIR}/vendor/json/include
    ${CMAKE_SOURCE_DIR}/vendor/kult
    ${CMAKE_SOURCE_DIR}/vendor/cxx-prettyprint
    ${CMAKE_SOURCE_DIR}/vendor/tmxlite/tmxlite/include
    ${CMAKE_SOURCE_DIR}/vendor/assimp/include
    ${CMAKE_BINARY_DIR}/vendor/assimp/include
    ${CMAKE_SOURCE_DIR}/vendor/khronos/include
)
LINK_DIRECTORIES(
    ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
    ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}
    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
)

ADD_SUBDIRECTORY(vendor)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(tests)
ADD_SUBDIRECTORY(games)

